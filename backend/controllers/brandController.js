import Brand from '../models/Brand.js';

// üìå L·∫•y t·∫•t c·∫£ th∆∞∆°ng hi·ªáu (c√≥ l·ªçc + pagination)
export const getBrands = async (req, res) => {
    try {
        const { name, page = 1, limit = 10 } = req.query;

        const filter = {};
        if (name) {
            filter.name = { $regex: name, $options: 'i' }; // t√¨m g·∫ßn ƒë√∫ng theo t√™n
        }

        // Ch·ªâ nh·∫≠n limit = 5, 10, 20
        const perPage = [5, 10, 20].includes(Number(limit)) ? Number(limit) : 10;
        const skip = (Number(page) - 1) * perPage;

        const total = await Brand.countDocuments(filter);
        const brands = await Brand.find(filter)
            .skip(skip)
            .limit(perPage);

        res.json({
            total,                // t·ªïng s·ªë th∆∞∆°ng hi·ªáu
            page: Number(page),   // trang hi·ªán t·∫°i
            limit: perPage,       // s·ªë th∆∞∆°ng hi·ªáu m·ªói trang
            totalPages: Math.ceil(total / perPage), // t·ªïng s·ªë trang
            brands                // danh s√°ch th∆∞∆°ng hi·ªáu
        });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu', error: error.message });
    }
};

// üìå T·∫°o th∆∞∆°ng hi·ªáu m·ªõi
export const createBrand = async (req, res) => {
    try {
        const { name, description } = req.body;
        const existingBrand = await Brand.findOne({ name });
        if (existingBrand) {
            return res.status(400).json({ message: 'T√™n th∆∞∆°ng hi·ªáu ƒë√£ t·ªìn t·∫°i' });
        }

        const brand = await Brand.create({ name, description });
        res.status(201).json(brand);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi t·∫°o th∆∞∆°ng hi·ªáu', error: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu
export const updateBrand = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description } = req.body;

        const brand = await Brand.findById(id);
        if (!brand) return res.status(404).json({ message: 'Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i' });

        brand.name = name || brand.name;
        brand.description = description || brand.description;

        const updatedBrand = await brand.save();
        res.json(updatedBrand);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu', error: error.message });
    }
};

// üìå X√≥a th∆∞∆°ng hi·ªáu
export const deleteBrand = async (req, res) => {
    try {
        const { id } = req.params;
        const brand = await Brand.findById(id);
        if (!brand) return res.status(404).json({ message: 'Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i' });

        await brand.deleteOne();
        res.json({ message: 'ƒê√£ x√≥a th∆∞∆°ng hi·ªáu th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi x√≥a th∆∞∆°ng hi·ªáu', error: error.message });
    }
};
