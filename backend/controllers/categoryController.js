import Category from '../models/category.js';

// üìå L·∫•y t·∫•t c·∫£ danh m·ª•c (c√≥ l·ªçc theo t√™n + pagination)
export const getCategories = async (req, res) => {
    try {
        const { name, page = 1, limit = 10 } = req.query;

        const filter = {};
        if (name) {
            filter.name = { $regex: name, $options: 'i' }; // t√¨m g·∫ßn ƒë√∫ng theo t√™n
        }

        // Ch·ªâ nh·∫≠n limit = 5, 10, 20
        const perPage = [5, 10, 20].includes(Number(limit)) ? Number(limit) : 10;
        const skip = (Number(page) - 1) * perPage;

        const total = await Category.countDocuments(filter);
        const categories = await Category.find(filter)
            .skip(skip)
            .limit(perPage);

        res.json({
            total,                // t·ªïng s·ªë danh m·ª•c
            page: Number(page),   // trang hi·ªán t·∫°i
            limit: perPage,       // s·ªë danh m·ª•c m·ªói trang
            totalPages: Math.ceil(total / perPage), // t·ªïng s·ªë trang
            categories           // danh s√°ch danh m·ª•c
        });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch danh m·ª•c', error: error.message });
    }
};

// üìå T·∫°o danh m·ª•c m·ªõi
export const createCategory = async (req, res) => {
    try {
        const { name, description } = req.body;
        const existingCategory = await Category.findOne({ name });
        if (existingCategory) {
            return res.status(400).json({ message: 'T√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i' });
        }

        const category = await Category.create({ name, description });
        res.status(201).json(category);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi t·∫°o danh m·ª•c', error: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t danh m·ª•c
export const updateCategory = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description } = req.body;

        const category = await Category.findById(id);
        if (!category) return res.status(404).json({ message: 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i' });

        category.name = name || category.name;
        category.description = description || category.description;

        const updatedCategory = await category.save();
        res.json(updatedCategory);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c', error: error.message });
    }
};

// üìå X√≥a danh m·ª•c
export const deleteCategory = async (req, res) => {
    try {
        const { id } = req.params;
        const category = await Category.findById(id);
        if (!category) return res.status(404).json({ message: 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i' });

        await category.deleteOne();
        res.json({ message: 'ƒê√£ x√≥a danh m·ª•c th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi x√≥a danh m·ª•c', error: error.message });
    }
};
