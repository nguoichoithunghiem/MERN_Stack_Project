import PaymentMethod from "../models/PaymentMethod.js";

// üìå L·∫•y t·∫•t c·∫£ ph∆∞∆°ng th·ª©c thanh to√°n (c√≥ l·ªçc + ph√¢n trang)
export const getPaymentMethods = async (req, res) => {
    try {
        const { name, description, page = 1, limit = 10 } = req.query;

        const filter = {};
        if (name) {
            filter.name = { $regex: name, $options: "i" }; // t√¨m g·∫ßn ƒë√∫ng theo t√™n
        }
        if (description) {
            filter.description = { $regex: description, $options: "i" }; // t√¨m g·∫ßn ƒë√∫ng theo m√¥ t·∫£
        }

        // Ch·ªâ nh·∫≠n limit = 5, 10, 20
        const perPage = [5, 10, 20].includes(Number(limit)) ? Number(limit) : 10;
        const skip = (Number(page) - 1) * perPage;

        const total = await PaymentMethod.countDocuments(filter);
        const methods = await PaymentMethod.find(filter)
            .skip(skip)
            .limit(perPage);

        res.status(200).json({
            total,                // t·ªïng s·ªë ph∆∞∆°ng th·ª©c
            page: Number(page),   // trang hi·ªán t·∫°i
            limit: perPage,       // s·ªë item m·ªói trang
            totalPages: Math.ceil(total / perPage), // t·ªïng s·ªë trang
            methods               // danh s√°ch ph∆∞∆°ng th·ª©c
        });
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi l·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n",
            error: error.message,
        });
    }
};


// üìå L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n theo ID
export const getPaymentMethodById = async (req, res) => {
    try {
        const method = await PaymentMethod.findById(req.params.id);
        if (!method)
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n" });
        res.status(200).json(method);
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n",
            error: error.message,
        });
    }
};

// üìå T·∫°o ph∆∞∆°ng th·ª©c thanh to√°n m·ªõi
export const createPaymentMethod = async (req, res) => {
    try {
        const { name, description } = req.body;

        // Ki·ªÉm tra tr√πng t√™n
        const existingMethod = await PaymentMethod.findOne({ name });
        if (existingMethod) {
            return res
                .status(400)
                .json({ message: "T√™n ph∆∞∆°ng th·ª©c thanh to√°n ƒë√£ t·ªìn t·∫°i" });
        }

        const newMethod = new PaymentMethod({ name, description });
        const savedMethod = await newMethod.save();
        res.status(201).json(savedMethod);
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi t·∫°o ph∆∞∆°ng th·ª©c thanh to√°n",
            error: error.message,
        });
    }
};

// üìå C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n
export const updatePaymentMethod = async (req, res) => {
    try {
        const updatedMethod = await PaymentMethod.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true }
        );
        if (!updatedMethod)
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n" });
        res.status(200).json(updatedMethod);
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n",
            error: error.message,
        });
    }
};

// üìå X√≥a ph∆∞∆°ng th·ª©c thanh to√°n
export const deletePaymentMethod = async (req, res) => {
    try {
        const deletedMethod = await PaymentMethod.findByIdAndDelete(req.params.id);
        if (!deletedMethod)
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n" });
        res
            .status(200)
            .json({ message: "X√≥a ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng" });
    } catch (error) {
        res.status(500).json({
            message: "L·ªói khi x√≥a ph∆∞∆°ng th·ª©c thanh to√°n",
            error: error.message,
        });
    }
};
