import Shipping from '../models/shipping.js';

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ shipping (c√≥ l·ªçc + ph√¢n trang)
export const getShippings = async (req, res) => {
    try {
        const { receiverName, address, status, page = 1, limit = 10 } = req.query;

        const filter = {};
        if (receiverName) {
            filter.receiverName = { $regex: receiverName, $options: 'i' }; // t√¨m g·∫ßn ƒë√∫ng theo t√™n ng∆∞·ªùi nh·∫≠n
        }
        if (address) {
            filter.address = { $regex: address, $options: 'i' }; // t√¨m g·∫ßn ƒë√∫ng theo ƒë·ªãa ch·ªâ
        }
        if (status) {
            filter.status = { $regex: status, $options: 'i' }; // l·ªçc theo tr·∫°ng th√°i
        }

        // Ch·ªâ nh·∫≠n limit = 5, 10, 20
        const perPage = [5, 10, 20].includes(Number(limit)) ? Number(limit) : 10;
        const skip = (Number(page) - 1) * perPage;

        const total = await Shipping.countDocuments(filter);
        const shippings = await Shipping.find(filter)
            .populate('order')
            .skip(skip)
            .limit(perPage);

        res.status(200).json({
            total,                // t·ªïng s·ªë shipping
            page: Number(page),   // trang hi·ªán t·∫°i
            limit: perPage,       // s·ªë item/trang
            totalPages: Math.ceil(total / perPage), // t·ªïng s·ªë trang
            shippings             // danh s√°ch shipping
        });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch giao h√†ng', error: error.message });
    }
};

// üìå L·∫•y chi ti·∫øt 1 shipping theo ID
export const getShippingById = async (req, res) => {
    try {
        const shipping = await Shipping.findById(req.params.id).populate('order');
        if (!shipping) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin giao h√†ng' });
        res.status(200).json(shipping);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// üìå T·∫°o m·ªõi shipping
export const createShipping = async (req, res) => {
    try {
        const newShipping = new Shipping(req.body);
        const savedShipping = await newShipping.save();
        res.status(201).json(savedShipping);
    } catch (error) {
        res.status(400).json({ message: 'L·ªói khi t·∫°o th√¥ng tin giao h√†ng', error });
    }
};

// üìå C·∫≠p nh·∫≠t shipping
export const updateShipping = async (req, res) => {
    try {
        const updatedShipping = await Shipping.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedShipping)
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin giao h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t' });
        res.status(200).json(updatedShipping);
    } catch (error) {
        res.status(400).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin giao h√†ng', error });
    }
};

// üìå X√≥a shipping
export const deleteShipping = async (req, res) => {
    try {
        const deletedShipping = await Shipping.findByIdAndDelete(req.params.id);
        if (!deletedShipping)
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin giao h√†ng ƒë·ªÉ x√≥a' });
        res.status(200).json({ message: 'ƒê√£ x√≥a th√¥ng tin giao h√†ng th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi x√≥a th√¥ng tin giao h√†ng', error });
    }
};
